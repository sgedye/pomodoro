{"version":3,"sources":["components/Controls.js","components/Timers.js","assets/temple-bell.mp3","App.js","index.js"],"names":["Controls","handlePlayPause","handleReset","Provider","value","color","size","Button","id","onClick","styled","button","Timers","breakLength","sessionLength","handleChange","TimerWrapper","Timer","Selectors","ButtonDown","type","disabled","ButtonUp","div","timerMax","defaultSession","App","useState","setType","setBreakLength","setSessionLength","secondsLeft","setSecondsLeft","isPlaying","setIsPlaying","audioRef","useRef","countdownRef","Math","min","prev","max","changeTime","CountdownWrapper","ref","date","Date","now","onComplete","current","play","setTimeout","autoStart","onTick","style","textTransform","floor","slice","pause","start","currentTime","src","templeBell","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f58facc.chunk.js","sourcesContent":["import { IconContext } from \"react-icons\";\nimport { FaPlay, FaPause, FaRedoAlt } from \"react-icons/fa\";\n\nimport styled from \"styled-components\";\n\nexport const Controls = ({ handlePlayPause, handleReset }) => {\n  return (\n    <IconContext.Provider value={{ color: \"black\", size: \"1.5rem\" }}>\n      <Button id=\"start_stop\" onClick={handlePlayPause}>\n        <FaPlay />\n        <FaPause />\n      </Button>\n      <Button id=\"reset\" onClick={handleReset}>\n        <FaRedoAlt />\n      </Button>\n    </IconContext.Provider>\n  );\n};\n\nconst Button = styled.button`\n  border: none;\n  background-color: transparent;\n  display: inline-block;\n  padding: 0.75rem 0.5rem;\n  cursor: pointer;\n\n  &:active {\n    transform: translate(1px, 1px);\n  }\n`;\n","import styled from \"styled-components\";\n\nimport { FaAngleDown, FaAngleUp } from \"react-icons/fa\";\n\nexport const Timers = ({ breakLength, sessionLength, handleChange }) => {\n  return (\n    <TimerWrapper>\n      <Timer id=\"break-timer\">\n        <label id=\"break-label\">Break Time</label>\n        <Selectors>\n          <ButtonDown\n            id=\"break-decrement\"\n            onClick={() => handleChange(\"break-decrement\")}\n          >\n            <FaAngleDown />\n          </ButtonDown>\n          <input\n            id=\"break-length\"\n            type=\"text\"\n            size=\"2\"\n            value={breakLength}\n            disabled\n          />\n          <ButtonUp\n            id=\"break-increment\"\n            onClick={() => handleChange(\"break-increment\")}\n          >\n            <FaAngleUp />\n          </ButtonUp>\n        </Selectors>\n      </Timer>\n      <Timer id=\"session-timer\">\n        <label id=\"session-label\">Session Time</label>\n        <Selectors>\n          <ButtonDown\n            id=\"session-decrement\"\n            onClick={() => handleChange(\"session-decrement\")}\n          >\n            <FaAngleDown />\n          </ButtonDown>\n          <input\n            id=\"session-length\"\n            type=\"text\"\n            size=\"2\"\n            value={sessionLength}\n            disabled\n          />\n          <ButtonUp\n            id=\"session-increment\"\n            onClick={() => handleChange(\"session-increment\")}\n          >\n            <FaAngleUp />\n          </ButtonUp>\n        </Selectors>\n      </Timer>\n    </TimerWrapper>\n  );\n};\n\nconst TimerWrapper = styled.div`\n  width: 300px;\n  margin: 20px auto;\n  font-size: 1.2em;\n  display: flex;\n`;\n\nconst Timer = styled.div`\n  display: inline-block;\n  padding: 20px 10px;\n  width: 50%;\n\n  input {\n    font-size: 1rem;\n    color: black;\n    background-color: white;\n  }\n  label {\n    font-size: 1.25rem;\n    display: inline-block;\n    margin-bottom: 0.5rem;\n    font-weight: bold;\n    text-shadow: -1px -1px 10px white, 1px 1px 2px white;\n  }\n  &:first-of-type {\n    margin-right: 1rem;\n  }\n`;\n\nconst ButtonDown = styled.button`\n  &:active {\n    transform: translateY(1px);\n  }\n`;\n\nconst ButtonUp = styled.button`\n  &:active {\n    transform: translateY(-1px);\n  }\n`;\n\nconst Selectors = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: auto;\n  input {\n    text-align: center;\n    border: 1px solid black;\n    border-radius: 5px;\n    padding: 5px;\n    margin: 0 3px;\n  }\n  button {\n    border: 0;\n    background-color: transparent;\n    font-size: 1.8rem;\n    display: flex;\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/temple-bell.0526e343.mp3\";","import { useState, useRef } from \"react\";\nimport Countdown from \"react-countdown\";\n\nimport { Timers, Controls } from \"./components\";\n\nimport styled from \"styled-components\";\nimport templeBell from \"./assets/temple-bell.mp3\";\n\nimport \"./assets/index.css\";\n\nconst timerMax = 3600;\nconst timerMin = 60;\nconst defaultBreak = 300;\nconst defaultSession = 1500;\n\nexport const App = () => {\n  const [type, setType] = useState(\"session\");\n  const [breakLength, setBreakLength] = useState(defaultBreak);\n  const [sessionLength, setSessionLength] = useState(defaultSession);\n  const [secondsLeft, setSecondsLeft] = useState(defaultSession);\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const audioRef = useRef(null);\n  const countdownRef = useRef(null);\n\n  const changeTime = (id) => {\n    if (!isPlaying) {\n      switch (id) {\n        case \"break-increment\":\n          type === \"break\" &&\n            setSecondsLeft(Math.min(breakLength + 60, timerMax));\n          setBreakLength((prev) => Math.min(prev + 60, timerMax));\n          break;\n        case \"break-decrement\":\n          type === \"break\" &&\n            setSecondsLeft(Math.max(breakLength - 60, timerMin));\n          setBreakLength((prev) => Math.max(prev - 60, timerMin));\n          break;\n        case \"session-increment\":\n          type === \"session\" &&\n            setSecondsLeft(Math.min(sessionLength + 60, timerMax));\n          setSessionLength((prev) => Math.min(prev + 60, timerMax));\n          break;\n        case \"session-decrement\":\n          type === \"session\" &&\n            setSecondsLeft(Math.max(sessionLength - 60, timerMin));\n          setSessionLength((prev) => Math.max(prev - 60, timerMin));\n          break;\n        default:\n          return;\n      }\n    }\n  };\n\n  const resetTimer = () => {\n    audioRef.current.pause();\n    audioRef.current.currentTime = 0;\n    setIsPlaying(false);\n    countdownRef.current.pause();\n    setType(\"session\");\n    setBreakLength(defaultBreak);\n    setSessionLength(defaultSession);\n    setSecondsLeft(defaultSession);\n  };\n\n  const hitZero = () => {\n    setSecondsLeft(0);\n    audioRef.current.play();\n    setTimeout(() => {\n      type === \"session\"\n        ? setSecondsLeft(breakLength)\n        : setSecondsLeft(sessionLength);\n      type === \"session\" ? setType(\"break\") : setType(\"session\");\n    }, 999);\n  };\n\n  const playPause = () => {\n    isPlaying ? countdownRef.current.pause() : countdownRef.current.start();\n    setIsPlaying((prev) => !prev);\n  };\n\n  return (\n    <div id=\"pomodoro\">\n      <h1>Pomodoro Timer</h1>\n      <Timers\n        breakLength={breakLength / 60}\n        sessionLength={sessionLength / 60}\n        handleChange={(id) => changeTime(id)}\n      />\n\n      <CountdownWrapper id=\"countdown\">\n        <Countdown\n          ref={countdownRef}\n          date={Date.now() + secondsLeft * 1000}\n          onComplete={hitZero}\n          autoStart={isPlaying}\n          onTick={() => setSecondsLeft((prev) => prev - 1)}\n          key={`${type}-counter`}\n        />\n        <div id=\"timer-label\" style={{ textTransform: \"capitalize\" }}>\n          {type}\n        </div>\n        <div id=\"time-left\">\n          {`0${Math.floor(secondsLeft / 60)}`.slice(-2)}:\n          {`0${secondsLeft % 60}`.slice(-2)}\n        </div>\n      </CountdownWrapper>\n\n      <Controls handlePlayPause={playPause} handleReset={resetTimer} />\n\n      <audio id=\"beep\" ref={audioRef} src={templeBell}>\n        Your browser does not support the <code>audio</code> element.\n      </audio>\n    </div>\n  );\n};\n\nconst CountdownWrapper = styled.div`\n  span {\n    display: none;\n  }\n`;\n","import { render } from \"react-dom\";\nimport { App } from \"./App\";\n\nrender(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}