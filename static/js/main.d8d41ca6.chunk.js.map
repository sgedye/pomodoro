{"version":3,"sources":["assets/temple-bell.mp3","components/Timers.js","components/Controls.js","index.js"],"names":["module","exports","Container","styled","div","Timer","Selectors","Timers","props","id","onClick","handleChange","type","size","value","breakLength","readOnly","sessionLength","Controls","Provider","color","handlePlayPause","handleReset","App","useState","setType","setBreakLength","setSessionLength","interv","setInterv","secondsLeft","setSecondsLeft","isPlaying","setIsPlaying","audioRef","useRef","useEffect","current","play","run","minutes","Math","floor","seconds","time","slice","console","log","split","change","pause","currentTime","clearInterval","setInterval","ref","src","templeBell","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8d41ca6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/temple-bell.df048d1b.mp3\";","import React from 'react';\nimport styled from 'styled-components';\n\nimport { FaAngleDown, FaAngleUp } from 'react-icons/fa';\n\nfunction Timers(props) {\n  return (\n    <Container>\n      <Timer id=\"break-timer\">\n        <label id=\"break-label\">Break Time</label>\n        <Selectors>\n          <FaAngleDown\n            id=\"break-decrement\"\n            onClick={() => props.handleChange(\"break-decrement\")}\n          />\n          <input id=\"break-length\" type=\"text\" size=\"2\" value={props.breakLength} readOnly />\n          <FaAngleUp\n            id=\"break-increment\"\n            onClick={() => props.handleChange(\"break-increment\")}\n          />\n        </Selectors>\n      </Timer>\n      <Timer id=\"session-timer\">\n        <label id=\"session-label\">Session Time</label>\n        <Selectors>\n          <FaAngleDown\n            id=\"session-decrement\"\n            onClick={() => props.handleChange(\"session-decrement\")}\n          />\n          <input id=\"session-length\" type=\"text\" size=\"2\" value={props.sessionLength} readOnly />\n          <FaAngleUp\n            id=\"session-increment\"\n            onClick={() => props.handleChange(\"session-increment\")}\n          />\n        </Selectors>\n      </Timer>\n    </Container>\n  );\n};\n\nconst Container = styled.div`\n  font-size: 1.2em;\n`\nconst Timer = styled.div`\n  display: inline-block;\n  margin: 20px 5px;\n  padding: 20px 10px;\n  min-width: 125px;\n  label {\n    display: inline-block;\n    margin-bottom: 10px;\n    font-weight: 500;\n    text-shadow: -1px -1px 10px white, 1px 1px 2px white;\n  }\n  svg {\n    font-size: 1.4em;\n  }\n`\nconst Selectors = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: auto;\n  input {\n    text-align: center;\n    border: 1px solid black;\n    border-radius: 5px;\n    padding: 5px;\n    margin: 0 3px;\n  }\n`\n\nexport default Timers;\n","import React from 'react'\nimport { IconContext } from 'react-icons'\nimport { FaPlay, FaPause, FaRedoAlt } from 'react-icons/fa'\n\nfunction Controls(props) {\n  return (\n    <IconContext.Provider value={{ color: \"blue\", size: \"1.4rem\"}}>\n      <div id=\"start_stop\" onClick={() => props.handlePlayPause()}>\n        <FaPlay />\n        <FaPause />\n      </div>\n      <FaRedoAlt id=\"reset\" onClick = {() => props.handleReset()} />\n    </IconContext.Provider>\n  )\n}\n\nexport default Controls\n","import React, { useState, useEffect, useRef } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './assets/index.css'\nimport Timers from './components/Timers'\nimport Controls from './components/Controls'\nimport templeBell from './assets/temple-bell.mp3'\n\nfunction App() {\n  const timerMax = 3600;\n  const timerMin = 60;\n  const defaultBreak = 300;\n  const defaultSession = 1500;\n  const [type, setType] = useState(\"Session\")\n  const [breakLength, setBreakLength] = useState(defaultBreak)\n  const [sessionLength, setSessionLength] = useState(defaultSession)\n  const [interv, setInterv] = useState()\n  const [secondsLeft, setSecondsLeft] = useState(defaultSession)\n  const [isPlaying, setIsPlaying] = useState(false)\n\n  const audioRef = useRef(null);\n\n  useEffect(() => {\n    if (secondsLeft === 0) {\n      audioRef.current.play()\n    }\n    if (secondsLeft < 0) {\n      if (type === \"Session\") {\n        setSecondsLeft(() => breakLength);\n        setType(() => \"Break\")\n      } else {\n        setSecondsLeft(() => sessionLength)\n        setType(() => \"Session\")\n      }\n    }\n  }, [secondsLeft, sessionLength, breakLength, type])\n\n  const changeTime = id => {\n    const [type, change] = id.split(\"-\")\n    if (type === \"break\" && change === \"increment\" && breakLength < timerMax) {\n      setBreakLength(breakLength => breakLength + 60)\n    } else if (type === \"break\" && change === \"decrement\" && breakLength > timerMin) {\n      setBreakLength(breakLength => breakLength - 60)\n    } else if (type === \"session\" && change === \"increment\" && sessionLength < timerMax) {\n      setSessionLength(sessionLength => sessionLength + 60)\n      setSecondsLeft(sessionLength => sessionLength + 60)\n    } else if (type === \"session\" && change === \"decrement\" && sessionLength > timerMin) {\n      setSessionLength(sessionLength => sessionLength - 60)\n      setSecondsLeft(sessionLength => sessionLength - 60)\n    }\n  }\n  const startTimer = () => {\n    setIsPlaying(() => true)\n    setInterv(() => setInterval(run, 1000))\n  }\n  const run = () => setSecondsLeft(secondsLeft => secondsLeft - 1);\n  const stopTimer = () => {\n    clearInterval(interv)\n    setIsPlaying(() => false)\n  }\n  const resetTimer = () => {\n    audioRef.current.pause();\n    audioRef.current.currentTime = 0;\n    clearInterval(interv);\n    setIsPlaying(() => false);\n    setType(() => \"Session\");\n    setBreakLength(() => defaultBreak);\n    setSessionLength(() => defaultSession);\n    setSecondsLeft(() => defaultSession);\n  }\n  const playPause = () => (isPlaying ? stopTimer() : startTimer())\n\n  const minutes = Math.floor(secondsLeft / 60)\n  const seconds = secondsLeft - minutes * 60\n  const time = `0${minutes}`.slice(-2) + \":\" + `0${seconds}`.slice(-2)\n  console.log(\"%c type|time: \", \"color: purple; font-weight: bold;\", type, time)\n  return (\n    <div id=\"pomodoro\">\n      <h1>Pomodoro Timer</h1>\n      <Timers\n        breakLength={breakLength / 60}\n        sessionLength={sessionLength / 60}\n        handleChange={changeTime}\n      />\n      <div id=\"countdown\">\n        <div id=\"timer-label\">{type}</div>\n        <div id=\"time-left\">{time}</div>\n      </div>\n      <Controls\n        isPlaying={isPlaying}\n        handleReset={resetTimer}\n        handlePlayPause={playPause}\n      />\n      <audio id=\"alarm-sound\" ref={audioRef} src={templeBell}>\n        Your browser does not support the <code>audio</code> element.\n      </audio>\n    </div>\n  )\n}\n\nexport default App\n\nReactDOM.render(<App />, document.getElementById(\"root\"))"],"sourceRoot":""}